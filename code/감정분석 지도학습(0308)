{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"감정분석 지도학습(0308)","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPnmSKBAfgXg6mpUlcGDUiU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"B2LBDfQ4hfgv"},"outputs":[],"source":["# 다운 받은 파일을 DataFrame으로 만들어 3개의 데이터만 출력하시오\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import pandas as pd\n","\n","path = '/content/drive/MyDrive/머신러닝/data/labeledTrainData.tsv'\n","\n","df_reviews = pd.read_csv(path, sep = '\\t', quoting=3)\n","df_reviews.head(3)"],"metadata":{"id":"se26QsGxhpLI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["review_str = df_reviews['review'][0]\n","review_str"],"metadata":{"id":"G2AKbO7AhwEK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["review_str = review_str.replace('<br />', ' ')"],"metadata":{"id":"o074bs6SjzFf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["review_str "],"metadata":{"id":"blATnahakE60"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import re\n","\n","re.sub('[^a-zA-Z]', ' ', review_str)"],"metadata":{"id":"ys7cTIDEkIE9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import re\n","\n","# 영어가 아닌 문자 제거\n","# re.sub(정규표현식, new_text, old_text)\n","df_reviews[\"review\"]=df_reviews[\"review\"].apply(lambda x : re.sub(\"[^a-zA-Z]\", \" \", x))\n","df_reviews[\"review\"]=df_reviews[\"review\"].apply(lambda x : review_str.replace('<br />', ' '))"],"metadata":{"id":"BV7qra0ukmXh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_reviews['review'][0]"],"metadata":{"id":"KBp5jENxlkjw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 훈련 / 검증 데이터\n","from sklearn.model_selection import train_test_split\n","\n","X_data = df_reviews['review']\n","y_labels = df_reviews['sentiment']\n","\n","X_train, X_test, y_train, y_test = train_test_split(X_data, y_labels, test_size=3, random_state=62)"],"metadata":{"id":"jXa8zCIInTEs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 파이프라인을 이용한 모델 생성 및 예측\n","# CountVectorizer, logisticRegression\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.pipeline import Pipeline\n","\n","vect = CountVectorizer(stop_words='english', ngram_range=(1,2))\n","lr = LogisticRegression(max_iter=1000, C=10)\n","\n","pipeline = Pipeline([('cnt_vect', vect), ('LR', lr)])\n","pipeline.fit(X_train, y_train)"],"metadata":{"id":"iDvleoiM6vZw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score\n","\n","pred = pipeline.predict(X_test)\n","accuracy_score(y_test, pred)"],"metadata":{"id":"rO9dqIeHAM2I"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import roc_auc_score\n","\n","pipeline.predict_proba(X_test)\n","accuracy_score(y_test, pred)"],"metadata":{"id":"yHL3OaFwAjAH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import roc_auc_score\n","pred_prob = pipeline.predict_proba(X_test)\n","pred_prob_1 = pred_prob[:, 1]\n","roc_auc_score(y_test, pred_prob_1)"],"metadata":{"id":"6WiJnKZiBcuf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# TF-IDF를 이용하여 파이프라인 모델 생성, 하이퍼 파라미터 적용\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.pipeline import Pipeline\n","\n","vect = TfidfVectorizer(stop_words='english', ngram_range=(1,2))\n","lr = LogisticRegression(max_iter=1000)\n","\n","pipeline = Pipeline([('tfidf_vect', vect), ('LR', lr)])"],"metadata":{"id":"22TktsoZB-z-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV\n","\n","params={\n","    'tfidf_vect_ngram_range':[(1,1), (1,2), (1,3)],\n","    'tfidf_vect_max_df':[100, 200, 300],\n","    'LR__C':[0.1, 1, 5, 10]\n","}\n","\n","grid_cv_pipe = GridSearchCV(pipeline, param_grid=params, cv=3, scoring='accuracy')\n","grid_cv_pipe.fit(X_train, y_train)\n","grid_cv_pipe.best_score_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":414},"id":"ul6F7LgLHznZ","executionInfo":{"status":"error","timestamp":1646720042293,"user_tz":-540,"elapsed":273,"user":{"displayName":"이충일","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14549651031576837673"}},"outputId":"e792d919-5867-4157-c098-4b118bb25a0f"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-48-5317e1b932ad>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mgrid_cv_pipe\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGridSearchCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpipeline\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_grid\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscoring\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'accuracy'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mgrid_cv_pipe\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0mgrid_cv_pipe\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_score_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    889\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    890\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 891\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    892\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;31m# multimetric is determined here because in the case of a callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1390\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1392\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1393\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    849\u001b[0m                     )\n\u001b[1;32m    850\u001b[0m                     for (cand_idx, parameters), (split_idx, (train, test)) in product(\n\u001b[0;32m--> 851\u001b[0;31m                         \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcandidate_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroups\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    852\u001b[0m                     )\n\u001b[1;32m    853\u001b[0m                 )\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1041\u001b[0m             \u001b[0;31m# remaining jobs.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1042\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1043\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1044\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1045\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[0;34m(self, iterator)\u001b[0m\n\u001b[1;32m    859\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    860\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 861\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    862\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    863\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    777\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    778\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 779\u001b[0;31m             \u001b[0mjob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    780\u001b[0m             \u001b[0;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    781\u001b[0m             \u001b[0;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[0;34m(self, func, callback)\u001b[0m\n\u001b[1;32m    206\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m         \u001b[0;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 208\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    209\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    570\u001b[0m         \u001b[0;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    571\u001b[0m         \u001b[0;31m# arguments in memory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 572\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    573\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    574\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    261\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    262\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 263\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    264\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    265\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__reduce__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    261\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    262\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 263\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    264\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    265\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__reduce__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/fixes.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    214\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconfig_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 216\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    217\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36m_fit_and_score\u001b[0;34m(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, return_train_score, return_parameters, return_n_test_samples, return_times, return_estimator, split_progress, candidate_progress, error_score)\u001b[0m\n\u001b[1;32m    666\u001b[0m             \u001b[0mcloned_parameters\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclone\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msafe\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    667\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 668\u001b[0;31m         \u001b[0mestimator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mcloned_parameters\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    669\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    670\u001b[0m     \u001b[0mstart_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/pipeline.py\u001b[0m in \u001b[0;36mset_params\u001b[0;34m(self, **kwargs)\u001b[0m\n\u001b[1;32m    186\u001b[0m             \u001b[0mPipeline\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0minstance\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    187\u001b[0m         \"\"\"\n\u001b[0;32m--> 188\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_set_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"steps\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    189\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    190\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/metaestimators.py\u001b[0m in \u001b[0;36m_set_params\u001b[0;34m(self, attr, **params)\u001b[0m\n\u001b[1;32m     52\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_replace_estimator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mattr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m         \u001b[0;31m# 3. Step parameters and other initialisation arguments\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 54\u001b[0;31m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     55\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mset_params\u001b[0;34m(self, **params)\u001b[0m\n\u001b[1;32m    246\u001b[0m                     \u001b[0;34m\"Invalid parameter %s for estimator %s. \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    247\u001b[0m                     \u001b[0;34m\"Check the list of available parameters \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 248\u001b[0;31m                     \u001b[0;34m\"with `estimator.get_params().keys()`.\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    249\u001b[0m                 )\n\u001b[1;32m    250\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Invalid parameter tfidf_vect_max_df for estimator Pipeline(steps=[('tfidf_vect',\n                 TfidfVectorizer(ngram_range=(1, 2), stop_words='english')),\n                ('LR', LogisticRegression(max_iter=1000))]). Check the list of available parameters with `estimator.get_params().keys()`."]}]},{"cell_type":"code","source":["import nltk\n","\n","nltk.download('all')"],"metadata":{"id":"7K62duVvM7in"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from nltk.corpus import wordnet as wn\n","\n","term = 'present'\n","\n","synsets = wn.synsets(term)\n","synsets"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GkBiJ8EENW_w","executionInfo":{"status":"ok","timestamp":1646720845431,"user_tz":-540,"elapsed":3669,"user":{"displayName":"이충일","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14549651031576837673"}},"outputId":"0de65598-7774-400f-a12a-be3c64f2d3ed"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Synset('present.n.01'),\n"," Synset('present.n.02'),\n"," Synset('present.n.03'),\n"," Synset('show.v.01'),\n"," Synset('present.v.02'),\n"," Synset('stage.v.01'),\n"," Synset('present.v.04'),\n"," Synset('present.v.05'),\n"," Synset('award.v.01'),\n"," Synset('give.v.08'),\n"," Synset('deliver.v.01'),\n"," Synset('introduce.v.01'),\n"," Synset('portray.v.04'),\n"," Synset('confront.v.03'),\n"," Synset('present.v.12'),\n"," Synset('salute.v.06'),\n"," Synset('present.a.01'),\n"," Synset('present.a.02')]"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","source":["for idx, synset in enumerate(synsets):\n","  # print(idx, ' : ', synset)\n","  print(synset.name())\n","  print(synset.lexname())\n","  print(synset.definition())\n","  print(synset.lemma_names())\n","  print('='*40)"],"metadata":{"id":"5Iw_3eC9OCEU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 각 단어별로 시맨틱 정보를 저장\n","tree = wn.synset('tree.n.01')\n","lion = wn.synset('lion.n.01')\n","tiger = wn.synset('tiger.n.02')\n","cat = wn.synset('cat.n.01')\n","dog = wn.synset('dog.n.01')\n","\n","# 여러 객체를 하나의 리스트로 생성\n","entities = [tree , lion , tiger , cat , dog]\n","\n","tree.definition()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"gaGA2LlXRlFg","executionInfo":{"status":"ok","timestamp":1646721958316,"user_tz":-540,"elapsed":307,"user":{"displayName":"이충일","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14549651031576837673"}},"outputId":"da793ee2-bb40-4ec0-b869-1af1d009ee84"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'a tall perennial woody plant having a main trunk and branches forming a distinct elevated crown; includes both gymnosperms and angiosperms'"]},"metadata":{},"execution_count":56}]},{"cell_type":"code","source":["tiger.definition()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"1A9z31mlRx44","executionInfo":{"status":"ok","timestamp":1646721973970,"user_tz":-540,"elapsed":258,"user":{"displayName":"이충일","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14549651031576837673"}},"outputId":"1079d75b-8bfc-47eb-fec4-ce0447e2a962"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'large feline of forests in most of Asia having a tawny coat with black stripes; endangered'"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["tiger.path_similarity(lion)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4C-WdJ_cSDs_","executionInfo":{"status":"ok","timestamp":1646722051747,"user_tz":-540,"elapsed":248,"user":{"displayName":"이충일","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14549651031576837673"}},"outputId":"8389666c-19e2-4f44-f4e3-2d5588d12329"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.3333333333333333"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["tree.path_similarity(tiger)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zf7YRbKpSHUP","executionInfo":{"status":"ok","timestamp":1646722063775,"user_tz":-540,"elapsed":374,"user":{"displayName":"이충일","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14549651031576837673"}},"outputId":"affca286-f270-4a78-83b8-f8f4e6ac2f70"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.07142857142857142"]},"metadata":{},"execution_count":59}]},{"cell_type":"code","source":["tree_sim = [tree.path_similarity(entity) for entity in entities]\n","tree_sim"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3b9uZpVfSa2B","executionInfo":{"status":"ok","timestamp":1646722160180,"user_tz":-540,"elapsed":394,"user":{"displayName":"이충일","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14549651031576837673"}},"outputId":"4266f560-e222-4d8c-e0d4-05d3649e12a4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1.0, 0.07142857142857142, 0.07142857142857142, 0.07692307692307693, 0.125]"]},"metadata":{},"execution_count":60}]},{"cell_type":"code","source":["tree_sim = [round(tree.path_similarity(entity),2) for entity in entities]\n","tree_sim"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hQXfUlEwVU14","executionInfo":{"status":"ok","timestamp":1646722977165,"user_tz":-540,"elapsed":276,"user":{"displayName":"이충일","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14549651031576837673"}},"outputId":"1ab6ca04-c85e-4255-b43f-7edc23a53b9a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1.0, 0.07, 0.07, 0.08, 0.12]"]},"metadata":{},"execution_count":63}]},{"cell_type":"code","source":["sims=[]\n","for e in entities:\n","  sim = [round(e.path_similarity(entity),2) for entity in entities]\n","  sims.append(sim)\n","\n","sims"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EURo8CHhVqMB","executionInfo":{"status":"ok","timestamp":1646723048963,"user_tz":-540,"elapsed":266,"user":{"displayName":"이충일","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14549651031576837673"}},"outputId":"adb3bb13-7cdf-479b-8946-7c5046d02d98"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[1.0, 0.07, 0.07, 0.08, 0.12],\n"," [0.07, 1.0, 0.33, 0.25, 0.17],\n"," [0.07, 0.33, 1.0, 0.25, 0.17],\n"," [0.08, 0.25, 0.25, 1.0, 0.2],\n"," [0.12, 0.17, 0.17, 0.2, 1.0]]"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","source":["tree.name()\n","# 객체별 name list 생성\n","tree.name().split('.')\n","tree.name().split('.')[0]\n","\n","entity_names = [entity.name().split('.')[0] for entity in entities]\n","entity_names"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Js6uzgpUXG4d","executionInfo":{"status":"ok","timestamp":1646723794309,"user_tz":-540,"elapsed":298,"user":{"displayName":"이충일","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14549651031576837673"}},"outputId":"78b99c91-b98c-46db-816c-5077d129b4c0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['tree', 'lion', 'tiger', 'cat', 'dog']"]},"metadata":{},"execution_count":71}]},{"cell_type":"code","source":["df_sims = pd.DataFrame(sims, columns=entity_names, index=entity_names)\n","df_sims"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"Telv-EJ9YyUz","executionInfo":{"status":"ok","timestamp":1646723908713,"user_tz":-540,"elapsed":5,"user":{"displayName":"이충일","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14549651031576837673"}},"outputId":"e12129f5-d24e-4eb1-9414-5e8d43839b98"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-da3c385b-7a94-48bd-ac87-d2255aaff21d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>tree</th>\n","      <th>lion</th>\n","      <th>tiger</th>\n","      <th>cat</th>\n","      <th>dog</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>tree</th>\n","      <td>1.00</td>\n","      <td>0.07</td>\n","      <td>0.07</td>\n","      <td>0.08</td>\n","      <td>0.12</td>\n","    </tr>\n","    <tr>\n","      <th>lion</th>\n","      <td>0.07</td>\n","      <td>1.00</td>\n","      <td>0.33</td>\n","      <td>0.25</td>\n","      <td>0.17</td>\n","    </tr>\n","    <tr>\n","      <th>tiger</th>\n","      <td>0.07</td>\n","      <td>0.33</td>\n","      <td>1.00</td>\n","      <td>0.25</td>\n","      <td>0.17</td>\n","    </tr>\n","    <tr>\n","      <th>cat</th>\n","      <td>0.08</td>\n","      <td>0.25</td>\n","      <td>0.25</td>\n","      <td>1.00</td>\n","      <td>0.20</td>\n","    </tr>\n","    <tr>\n","      <th>dog</th>\n","      <td>0.12</td>\n","      <td>0.17</td>\n","      <td>0.17</td>\n","      <td>0.20</td>\n","      <td>1.00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-da3c385b-7a94-48bd-ac87-d2255aaff21d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-da3c385b-7a94-48bd-ac87-d2255aaff21d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-da3c385b-7a94-48bd-ac87-d2255aaff21d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["       tree  lion  tiger   cat   dog\n","tree   1.00  0.07   0.07  0.08  0.12\n","lion   0.07  1.00   0.33  0.25  0.17\n","tiger  0.07  0.33   1.00  0.25  0.17\n","cat    0.08  0.25   0.25  1.00  0.20\n","dog    0.12  0.17   0.17  0.20  1.00"]},"metadata":{},"execution_count":72}]}]}